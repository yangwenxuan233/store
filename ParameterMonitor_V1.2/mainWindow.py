# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:/Users/Administrator/AppData/Local/Temp/untitleda12132.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import time
from threading import Thread

import psutil
import pyqtgraph as pg
from PyQt5 import QtCore, QtWidgets

from run import DataMonitor


class Ui_MainWindow():
    time = time
    status = None
    net = ''
    data_list = []
    bytes = 0

    def __init__(self) -> None:
        a = DataMonitor()
        a.set_net()
        self.net = a.get_net()
        print(self.net)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(600, 400)

        self.mw = QtWidgets.QMainWindow()
        self.mw.setWindowTitle('pyqtgraph')
        self.cw = QtWidgets.QWidget()
        self.lay = QtWidgets.QGridLayout()
        self.cw.setLayout(self.lay)

        self.pw = pg.PlotWidget(name='Plot1')
        self.pw.setLabel('left', 'Value', units='Mb/s')
        self.pw.setLabel('bottom', 'Time', units='s')
        self.pw.setXRange(0, 10)
        self.pw.setYRange(0, 3)
        self.lay.addWidget(self.pw, 0, 0, 1, 2)

        self.start_button = QtWidgets.QPushButton(self.cw)
        self.start_button.setObjectName("start_button")
        self.end_button = QtWidgets.QPushButton(self.cw)
        self.end_button.setObjectName("end_button")

        self.textEdit = QtWidgets.QTextEdit(self.cw)
        self.textEdit.setObjectName("textEdit")
        self.textEdit.setFontPointSize(8)
        self.document = self.textEdit.document()
        self.document.setMaximumBlockCount(100)
        self.lay.addWidget(self.textEdit, 1, 0, 1, 2)
        self.lay.addWidget(self.start_button, 2, 0)
        self.lay.addWidget(self.end_button, 2, 1)

        MainWindow.setCentralWidget(self.cw)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.start_button.clicked.connect(lambda: self.control("start"))
        self.end_button.clicked.connect(lambda: self.control("end"))

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "ParameterMonitor"))
        self.start_button.setText(_translate("MainWindow", "start"))
        self.end_button.setText(_translate("MainWindow", "stop"))

    def control(self, order):
        if order == "start":
            self.status = True
            # 设置开始按钮不可点击，结束按钮可点击
            self.start_button.setEnabled(False)
            self.end_button.setEnabled(True)
            self.t = Thread(target=self.run)
            # 设置后台进程
            self.t.setDaemon(True)
            self.t.start()
            self.timer_start()
        else:
            # 结束按钮不可点击，开始按钮可以点击
            self.timer.stop()
            self.status = False
            self.start_button.setEnabled(True)
            self.end_button.setEnabled(False)

    def run(self):
        try:
            a = DataMonitor()
            freq = a.get_freq()
            self.time.sleep(1)
            count = -72
            part_loss, complete_loss, last_angle = 0, 0, None
            while True:
                if self.status is True:
                    count, part_loss, complete_loss, last_angle = a.data_monitor(freq, count, part_loss, complete_loss, last_angle)
                    if count > 0:
                        self.textEdit.append("总数据包:" + str(count) + "部分丢包数:" + str(part_loss) + "完全丢包数:" + str(complete_loss) + "丢包率:" + str(round(((part_loss + complete_loss)/count)*100, 4)) + "%")
                else:
                    return
        except Exception as e:
            self.textEdit.append(str(e))

    def draw(self):
        try:
            if self.status is True or self.status is None:
                start = self.bytes
                end = psutil.net_io_counters([True])[self.net][1]
                data = round((end - start)*8/1024/1024, 4)
                if len(self.data_list) > 10:
                    self.data_list = self.data_list[1:10]
                self.data_list.append(data)
                self.bytes = end
                self.pw.clear()
                self.pw.plot().setData(self.data_list, pen='g')
            else:
                return
        except Exception as e:
            print(str(e))

    def timer_start(self):
        self.timer = QtCore.QTimer(self)
        self.data_list = []
        self.bytes = psutil.net_io_counters([True])[self.net][1]
        self.timer.timeout.connect(self.draw)
        self.timer.setInterval(1000)
        self.timer.start()
